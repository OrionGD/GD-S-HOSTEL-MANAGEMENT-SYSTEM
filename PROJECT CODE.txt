1.SQL code
-- Create the main database for the hostel management system
CREATE DATABASE IF NOT EXISTS gd_hms;
USE gd_hms;

-- Table: attendance
-- Stores attendance records for hostellers
CREATE TABLE attendance (
    id INT(11) NOT NULL AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL,
    date DATE NOT NULL,
    status ENUM('P', 'A', 'L') NOT NULL,  -- P = Present, A = Absent, L = Leave
    PRIMARY KEY (id),
    INDEX (username)
);

-- Table: hostellers
-- Contains basic information about hostellers
CREATE TABLE hostellers (
    hosteller_id INT(11) NOT NULL AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    birth_date DATE DEFAULT NULL,
    email VARCHAR(100) DEFAULT NULL,
    phone_number VARCHAR(15) DEFAULT NULL,
    room_number INT(11) DEFAULT NULL,
    hostel_name VARCHAR(50) DEFAULT NULL,
    PRIMARY KEY (hosteller_id)
);

-- Table: outpass_requests
-- Manages requests made by students to leave the hostel
CREATE TABLE outpass_requests (
    request_id INT(11) NOT NULL AUTO_INCREMENT,
    user_id INT(11) DEFAULT NULL,
    request_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    start_date DATE DEFAULT NULL,
    end_date DATE DEFAULT NULL,
    reason TEXT DEFAULT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    username VARCHAR(50) DEFAULT NULL,
    PRIMARY KEY (request_id),
    INDEX (user_id)
);

-- Table: users
-- Stores login credentials and profile information of all users
CREATE TABLE users (
    user_id INT(11) NOT NULL AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('warden', 'hosteller') NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) DEFAULT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone_number VARCHAR(15) DEFAULT NULL,
    year_of_study INT(11) DEFAULT NULL,
    department VARCHAR(100) DEFAULT NULL,
    hostel_name VARCHAR(50) DEFAULT NULL,
    room_number VARCHAR(10) DEFAULT NULL,
    DOB DATE DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    PRIMARY KEY (user_id)
);

-- Table: warden
-- Contains login and contact details of wardens
CREATE TABLE warden (
    warden_id INT(11) NOT NULL AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) DEFAULT NULL,
    phone VARCHAR(20) DEFAULT NULL,
    PRIMARY KEY (warden_id)
);

2. Python Code
#HOMEPAGE.PY
import tkinter as tk
from tkinter import messagebox

def open_login():
    import login  # Ensure login.py contains open_login_window()
    login.open_login_window()

def show_homepage():
    root = tk.Tk()
    root.title("üè† Hostel Management System")
    root.geometry("800x600")
    root.config(bg="#e6f2ff")

    # --- Navbar ---
    navbar = tk.Frame(root, bg="#ccddff", pady=10)
    navbar.pack(fill='x')

    tk.Label(navbar, text="üè† Hostel Management System", font=("Arial", 16, "bold"), bg="#ccddff").pack(side="left", padx=20)

    nav_buttons = [
        ("Home", lambda: messagebox.showinfo("Home", "You are on the Home page.")),
        ("Features", lambda: messagebox.showinfo("Features", "See the features below.")),
        ("Copy Right", lambda: messagebox.showinfo("Copy Right", "GD 2025."))
    ]

    for text, cmd in nav_buttons:
        tk.Button(navbar, text=text, command=cmd, bg="white", font=("Arial", 12)).pack(side="right", padx=10)

    # --- Hero Section ---
    tk.Label(root, text="Welcome to Hostel Management System", font=("Arial", 20, "bold"), bg="#e6f2ff").pack(pady=30)
    tk.Label(root, text="Efficiently manage hostelers, attendance, and more.", font=("Arial", 14), bg="#e6f2ff").pack(pady=10)
    tk.Button(root, text="Get Started", command=open_login, font=("Arial", 12), bg="#3399ff", fg="white", padx=20, pady=5).pack(pady=10)

    # --- Features Section ---
    tk.Label(root, text="Our Features", font=("Arial", 16, "bold"), bg="#e6f2ff").pack(pady=20)

    features = ["Attendance Tracking", "Out Pass Management", "Warden Notifications", "Birthday Alerts"]
    for feat in features:
        tk.Label(root, text=feat, font=("Arial", 12), bg="#f0f8ff", width=40, relief="groove", pady=5).pack(pady=5)

    # --- Footer ---
    tk.Label(root, text="¬© 2025 | GD | Hostel Management System | All Rights Reserved", bg="#ccddff", font=("Arial", 10)).pack(side="bottom", fill="x", pady=10)

    root.mainloop()

# Only run if this is the main file
if __name__ == "__main__":
    show_homepage()
#login.py
import tkinter as tk
from tkinter import messagebox
import mysql.connector
from hosteller_dashboard import open_hosteller_dashboard
from warden_dashboard import open_warden_dashboard

# --- Database Connection ---
try:
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="gd_hms"
    )
    cursor = db.cursor()
    print("Database connection successful.")
except mysql.connector.Error as err:
    print(f"Database connection failed: {err}")
    exit()

# --- Theme Colors ---
theme_colors = {
    "light": {"bg": "#eafaf1", "fg": "#2c3e50"},
    "dark": {"bg": "#0f2027", "fg": "#7fffd4"}
}
current_theme = "light"

# --- Toggle Theme ---
def toggle_theme(root):
    global current_theme
    current_theme = "dark" if current_theme == "light" else "light"
    root.configure(bg=theme_colors[current_theme]["bg"])
    for widget in root.winfo_children():
        try:
            widget.configure(bg=theme_colors[current_theme]["bg"])
            if "fg" in widget.configure():
                widget.configure(fg=theme_colors[current_theme]["fg"])
        except tk.TclError:
            pass

# --- Register User ---
def register_user(username, password):
    if not username or not password:
        messagebox.showwarning("‚ö†Ô∏è Incomplete", "Please fill out both fields.")
        return
    try:
        cursor.execute(
            "INSERT INTO users (username, password, role) VALUES (%s, %s, 'hosteller')",
            (username, password)
        )
        db.commit()
        messagebox.showinfo("üéâ Success", "User registered successfully!")
    except mysql.connector.IntegrityError:
        messagebox.showerror("‚ùå Error", "Username already exists.")

# --- Login User ---
def login_user(username, password, win):

    cursor.execute("SELECT user_id, role FROM users WHERE username=%s AND password=%s", (username, password))
    result = cursor.fetchone()
    if result:
        user_id, role = result
        print(f"User logged in: {username} | Role: {role}")
        win.destroy()
        if role == "warden":
            open_warden_dashboard(username)
        elif role == "hosteller":
            open_hosteller_dashboard(username)
        else:
            messagebox.showerror("Login Error", f"Unknown role: {role}")
    else:
        messagebox.showerror("‚ùå Login Failed", "Invalid credentials.")

# --- Login Window ---
def main_login():
    login_win = tk.Tk()
    login_win.title("üîê Secure Login")
    login_win.geometry("400x370")
    login_win.configure(bg=theme_colors[current_theme]["bg"])

    tk.Label(login_win, text="üë§ User Access", font=("Helvetica", 18, "bold"),
             bg=theme_colors[current_theme]["bg"], fg=theme_colors[current_theme]["fg"]).pack(pady=20)

    tk.Label(login_win, text="üßë‚Äçüíª Username:", bg=theme_colors[current_theme]["bg"],
             fg=theme_colors[current_theme]["fg"]).pack(pady=5)
    username_entry = tk.Entry(login_win, width=30)
    username_entry.pack(pady=5)

    tk.Label(login_win, text="üîë Password:", bg=theme_colors[current_theme]["bg"],
             fg=theme_colors[current_theme]["fg"]).pack(pady=5)
    password_entry = tk.Entry(login_win, show="*", width=30)
    password_entry.pack(pady=5)

    button_frame = tk.Frame(login_win, bg=theme_colors[current_theme]["bg"])
    button_frame.pack(pady=20)

    tk.Button(button_frame, text="‚úÖ Login", width=14, font=("Helvetica", 12, "bold"),
              bg="#66bb6a", fg="white",
              command=lambda: login_user(username_entry.get(), password_entry.get(), login_win)).grid(row=0, column=0, padx=10)

    tk.Button(button_frame, text="üìù Register", width=14, font=("Helvetica", 12, "bold"),
              bg="#42a5f5", fg="white",
              command=lambda: register_user(username_entry.get(), password_entry.get())).grid(row=0, column=1, padx=10)

    tk.Button(login_win, text="üé® Switch Theme", font=("Helvetica", 12), relief="flat",
              bg=theme_colors[current_theme]["bg"], fg=theme_colors[current_theme]["fg"],
              command=lambda: toggle_theme(login_win)).pack(pady=10)

    login_win.mainloop()

# --- Launch Login ---
main_login()

#Register.py
import tkinter as tk
from tkinter import messagebox
from tkcalendar import DateEntry
import mysql.connector

# --- Database Connection ---
try:
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="gd_hms"
    )
    cursor = db.cursor()
except mysql.connector.Error as err:
    print(f"Database connection failed: {err}")
    exit()

# --- Register Hosteller ---
def register_hosteller(data):
    try:
        query = """
        INSERT INTO users (
            username, password, role, first_name, last_name, email, phone_number,
            year_of_study, department, hostel_name, room_number, DOB
        )
        VALUES (%s, %s, 'hosteller', %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        cursor.execute(query, data)
        db.commit()
        messagebox.showinfo("Success", "Hosteller registered successfully!")
    except mysql.connector.IntegrityError:
        messagebox.showerror("Error", "Username or Email already exists.")
    except Exception as e:
        messagebox.showerror("Database Error", str(e))

# --- Registration Form GUI ---
def open_extended_registration():
    reg_win = tk.Tk()
    reg_win.title("Extended Hosteller Registration")
    reg_win.geometry("400x650")
    reg_win.config(bg="white")

    fields = {}

    def add_field(label, show=None):
        tk.Label(reg_win, text=label, bg="white").pack(pady=2)
        entry = tk.Entry(reg_win, show=show) if not label.startswith("DOB") else DateEntry(reg_win, date_pattern='yyyy-mm-dd')
        entry.pack(pady=2)
        fields[label] = entry

    labels = [
        "Username", "Password", "First Name", "Last Name", "Email",
        "Phone Number", "Year of Study", "Department", "Hostel Name",
        "Room Number", "DOB"
    ]

    for lbl in labels:
        add_field(lbl, show="*" if lbl == "Password" else None)

    def on_submit():
        values = [fields[label].get() for label in labels]
        if all(values):
            register_hosteller(tuple(values))
        else:
            messagebox.showwarning("Missing Fields", "Please fill in all fields.")

    tk.Button(reg_win, text="Register", bg="skyblue", command=on_submit).pack(pady=20)
    reg_win.mainloop()

# Run
if __name__ == "__main__":
    open_extended_registration()
# hosteller_dashboard.py
import mysql.connector
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from datetime import datetime
import calendar
from tkcalendar import DateEntry


def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="gd_hms"
    )


# --- Hosteller Functions ---
def view_hosteller_info(username):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT first_name, last_name, email, phone_number, year_of_study, department, hostel_name, room_number 
        FROM users WHERE username = %s AND role = 'hosteller'
    """, (username,))
    result = cursor.fetchone()

    if not result:
        messagebox.showerror("Error", "Hosteller data not found.")
        return

    info_win = tk.Toplevel()
    info_win.title("Your Information")
    info_win.geometry("400x400")
    info_win.config(bg="#E0FFF0")

    labels = [
        "First Name", "Last Name", "Email", "Phone Number",
        "Year of Study", "Department", "Hostel Name", "Room Number"
    ]

    for label, value in zip(labels, result):
        tk.Label(info_win, text=f"{label}:", font=("Arial", 10, "bold"), bg="#E0FFF0").pack(pady=2, anchor="w", padx=20)
        tk.Label(info_win, text=value, font=("Arial", 10), bg="#E0FFF0").pack(pady=1, anchor="w", padx=40)

    tk.Button(info_win, text="Close", command=info_win.destroy).pack(pady=20)

def manage_attendance(username):
    from tkcalendar import Calendar
    import tkinter as tk
    from tkinter import ttk

    def mark_attendance(status):
        selected_date = cal.get_date()
        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            cursor.execute("""
                INSERT INTO attendance (username, date, status)
                VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE status = VALUES(status)
            """, (username, selected_date, status))
            conn.commit()
            messagebox.showinfo("Success", f"Marked {status} for {selected_date}")
            load_attendance()
        except Exception as e:
            messagebox.showerror("Error", str(e))
        finally:
            conn.close()

    def load_attendance():
        for item in tree.get_children():
            tree.delete(item)

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT date, status FROM attendance
            WHERE username = %s ORDER BY date DESC
        """, (username,))
        for date, status in cursor.fetchall():
            tree.insert('', 'end', values=(date, status))
        conn.close()

    att_win = tk.Toplevel()
    att_win.title("Manage Attendance")
    att_win.geometry("500x500")
    att_win.config(bg="#F0FFF0")

    tk.Label(att_win, text="Select a date and mark your attendance:", font=("Arial", 12, "bold"), bg="#F0FFF0").pack(pady=10)
    
    cal = Calendar(att_win, selectmode="day", date_pattern="yyyy-mm-dd")
    cal.pack(pady=10)

    btn_frame = tk.Frame(att_win, bg="#F0FFF0")
    btn_frame.pack(pady=10)
    for label, status in [("Present", "P"), ("Absent", "A"), ("Leave", "L")]:
        tk.Button(btn_frame, text=label, width=10, command=lambda s=status: mark_attendance(s)).pack(side="left", padx=5)

    tree = ttk.Treeview(att_win, columns=("Date", "Status"), show="headings")
    tree.heading("Date", text="Date")
    tree.heading("Status", text="Status")
    tree.pack(pady=20, fill="both", expand=True)

    load_attendance()

    tk.Button(att_win, text="Close", command=att_win.destroy).pack(pady=10)

def request_outpass(username):
    def submit_request():
        start_date = start_cal.get_date()
        end_date = end_cal.get_date()
        reason = reason_text.get("1.0", tk.END).strip()

        if start_date > end_date:
            messagebox.showerror("Invalid Dates", "Start date cannot be after end date.")
            return
        if not reason:
            messagebox.showwarning("Missing Reason", "Please enter a reason for your outpass request.")
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        try:
        # Get user_id from username
            cursor.execute("SELECT user_id FROM users WHERE username = %s", (username,))
            result = cursor.fetchone()
            if not result:
                messagebox.showerror("User Error", "User not found in the database.")
                return

            user_id = result[0]

        # Insert into outpass_requests with user_id and request_date as NOW()
            cursor.execute("""
                INSERT INTO outpass_requests (user_id, start_date, end_date, reason, status, request_date)
                VALUES (%s, %s, %s, %s, %s, NOW())
            """, (user_id, start_date, end_date, reason, 'Pending'))
    
            conn.commit()
            messagebox.showinfo("Request Submitted", "Your outpass request has been submitted.")
            outpass_win.destroy()

        except Exception as e:
            messagebox.showerror("Error", str(e))
        finally:
            conn.close()
    # Create popup window
    outpass_win = tk.Toplevel()
    outpass_win.title("Request Outpass")
    outpass_win.geometry("450x400")
    outpass_win.config(bg="#F5F5DC")

    # Start Date (Dropdown calendar)
    tk.Label(outpass_win, text="Select Start Date:", bg="#F5F5DC", font=("Arial", 12)).pack(pady=5)
    start_cal = DateEntry(outpass_win, date_pattern='yyyy-mm-dd', width=15)
    start_cal.pack(pady=5)

    # End Date (Dropdown calendar)
    tk.Label(outpass_win, text="Select End Date:", bg="#F5F5DC", font=("Arial", 12)).pack(pady=5)
    end_cal = DateEntry(outpass_win, date_pattern='yyyy-mm-dd', width=15)
    end_cal.pack(pady=5)

    # Reason Text Field
    tk.Label(outpass_win, text="Reason for Outpass:", bg="#F5F5DC", font=("Arial", 12)).pack(pady=10)
    reason_text = tk.Text(outpass_win, height=5, width=45, wrap="word", font=("Arial", 10))
    reason_text.pack(pady=5)

    # Buttons
    tk.Button(outpass_win, text="Submit Request", command=submit_request, bg="#4CAF50", fg="white", width=20).pack(pady=15)
    tk.Button(outpass_win, text="Cancel", command=outpass_win.destroy, width=20).pack()


def view_outpass_history(username):
    import tkinter as tk
    from tkinter import ttk, messagebox

    def load_outpass_history():
        for item in tree.get_children():
            tree.delete(item)

        try:
            conn = get_db_connection()
            cursor = conn.cursor()

            # Step 1: Get user_id from username
            cursor.execute("SELECT user_id FROM users WHERE username = %s", (username,))
            result = cursor.fetchone()

            if not result:
                messagebox.showerror("Error", "User not found in the database.")
                return

            user_id = result[0]

            # Step 2: Fetch outpass history using user_id
            cursor.execute("""
                SELECT start_date, end_date, reason, status 
                FROM outpass_requests
                WHERE user_id = %s
                ORDER BY request_date DESC
            """, (user_id,))
            rows = cursor.fetchall()

            if not rows:
                messagebox.showinfo("No History", "No outpass requests found.")
                return

            for row in rows:
                tree.insert('', 'end', values=row)

        except Exception as e:
            messagebox.showerror("Error", str(e))
        finally:
            conn.close()

    # Create a new window for outpass history
    history_win = tk.Toplevel()
    history_win.title("Outpass History")
    history_win.geometry("600x400")
    history_win.config(bg="#FFF8DC")

    # Heading
    tk.Label(history_win, text="Your Outpass Request History", font=("Arial", 14, "bold"), bg="#FFF8DC").pack(pady=10)

    # Treeview to display the outpass history
    tree = ttk.Treeview(history_win, columns=("Start Date", "End Date", "Reason", "Status"), show="headings")
    tree.heading("Start Date", text="Start Date")
    tree.heading("End Date", text="End Date")
    tree.heading("Reason", text="Reason")
    tree.heading("Status", text="Status")
    tree.pack(pady=10, fill="both", expand=True)

    # Load data
    load_outpass_history()

    # Close button
    tk.Button(history_win, text="Close", command=history_win.destroy).pack(pady=10)

# --- Hosteller Dashboard ---
def open_hosteller_dashboard(hosteller_username):
    win = tk.Tk()
    win.title("Hosteller Dashboard")
    win.geometry("600x500")
    win.config(bg="#98FB98")

    # Use the passed username instead of 'hosteller_name'
    greeting = f"Welcome, {hosteller_username}!" if hosteller_username else "Welcome, Hosteller!"
    tk.Label(win, text=greeting, font=("Arial", 16, "bold"), bg="#98FB98").pack(pady=20)
    tk.Label(win, text=calendar.month_name[datetime.now().month], font=("Arial", 14), bg="#98FB98").pack()

    btns = [
        ("üìã View Personal Info", lambda: view_hosteller_info(hosteller_username)),
        ("üìÖ Manage Attendance", lambda: manage_attendance(hosteller_username)),
        ("üì§ Request Out Pass", lambda: request_outpass(hosteller_username)),
        ("üîç View Out Pass History", lambda: view_outpass_history(hosteller_username)),
        ("üö™ Logout", win.destroy)
    ]
    for text, cmd in btns:
        tk.Button(win, text=text, font=("Arial", 12), bg="lightgreen", width=30, command=cmd).pack(pady=8)

    win.mainloop()
# --- Only run if executed directly ---
if __name__ == "__main__":
    open_hosteller_dashboard()
# warden_dashboard.py

import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import mysql.connector
import calendar
from tkinter import ttk

def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="gd_hms"
    )


# --- Warden Dashboard ---
def open_warden_dashboard(username):
    conn = get_db_connection()
    cursor = conn.cursor()
    win = tk.Tk()
    win.title("Warden Dashboard")
    win.geometry("600x600")
    win.config(bg="#FFD700")

    tk.Label(win, text=f"Welcome, Warden {username}!", font=("Arial", 16, "bold"), bg="#FFD700").pack(pady=20)

    cal_label = tk.Label(win, text=calendar.month_name[datetime.now().month], font=("Arial", 14), bg="#FFD700")
    cal_label.pack()

    btns = [
        ("View Attendance", view_attendance),
        ("üì§ Approve Out Passes", approve_outpass),
        ("üìã View Hostellers", view_hostellers),
        ("üìÖ Attendance Overview", view_attendance_summary),
        ("üéÇ Birthday Alerts", show_birthday_alerts),
        ("üîç Filter Hostellers", filter_hostellers),
        ("üö™ Logout", win.destroy)
    ]
    for text, cmd in btns:
        tk.Button(win, text=text, font=("Arial", 12), bg="skyblue", width=30, command=cmd).pack(pady=8)

    win.mainloop()

# --- Warden Functional Placeholders ---
def view_attendance():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        query = """
            SELECT u.username, u.first_name, u.last_name, a.date, a.status
            FROM attendance a
            JOIN users u ON a.username = u.username
            ORDER BY a.date DESC
        """
        cursor.execute(query)
        records = cursor.fetchall()

        if not records:
            messagebox.showinfo("Attendance", "No attendance records found.")
            return

        att_win = tk.Toplevel()
        att_win.title("Attendance Records")
        att_win.geometry("700x400")
        att_win.config(bg="white")

        tk.Label(att_win, text="Attendance Records", font=("Arial", 14, "bold"), bg="white").pack(pady=10)

        frame = tk.Frame(att_win, bg="white")
        frame.pack(fill="both", expand=True)

        headings = ["Username", "First Name", "Last Name", "Date", "Status"]
        for idx, heading in enumerate(headings):
            tk.Label(frame, text=heading, font=("Arial", 10, "bold"), bg="lightgray", width=15, borderwidth=1, relief="solid").grid(row=0, column=idx)

        for row_idx, row in enumerate(records, start=1):
            for col_idx, value in enumerate(row):
                tk.Label(frame, text=value, font=("Arial", 10), bg="white", width=15, borderwidth=1, relief="solid").grid(row=row_idx, column=col_idx)

        cursor.close()
        conn.close()

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error fetching attendance records:\n{err}")

def approve_outpass():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # Query to get pending outpass requests
        query = """
            SELECT o.request_id, u.first_name, u.last_name, o.request_date, o.start_date, o.end_date, o.reason
            FROM outpass_requests o
            JOIN users u ON o.user_id = u.user_id
            WHERE o.status = 'Pending'
        """
        cursor.execute(query)
        records = cursor.fetchall()

        if not records:
            messagebox.showinfo("Approve Outpass", "No pending outpasses found.")
            return

        # Create a new window to display pending outpasses
        outpass_win = tk.Toplevel()
        outpass_win.title("Approve Outpass Requests")
        outpass_win.geometry("900x400")
        outpass_win.config(bg="white")

        tk.Label(outpass_win, text="Pending Outpass Requests", font=("Arial", 14, "bold"), bg="white").pack(pady=10)

        frame = tk.Frame(outpass_win, bg="white")
        frame.pack(fill="both", expand=True)

        # Create headings
        headings = ["Request ID", "First Name", "Last Name", "Request Date", "Start Date", "End Date", "Reason", "Action"]
        for idx, heading in enumerate(headings):
            tk.Label(frame, text=heading, font=("Arial", 10, "bold"), bg="lightgray", width=15, borderwidth=1, relief="solid").grid(row=0, column=idx)

        # Display pending outpasses
        for row_idx, row in enumerate(records, start=1):
            for col_idx, value in enumerate(row[:-1]):  # All columns except the last "Reason" column
                # Handle NULL in request_date by showing "Not Set" or any placeholder
                display_value = value if value is not None else "Not Set"
                tk.Label(frame, text=display_value, font=("Arial", 10), bg="white", width=15, borderwidth=1, relief="solid").grid(row=row_idx, column=col_idx)
            
            # Reason column
            tk.Label(frame, text=row[6], font=("Arial", 10), bg="white", width=15, borderwidth=1, relief="solid").grid(row=row_idx, column=6)

            # Add approve/reject buttons
            approve_btn = tk.Button(frame, text="Approve", command=lambda id=row[0]: update_outpass_status(id, 'Approved', outpass_win))
            reject_btn = tk.Button(frame, text="Reject", command=lambda id=row[0]: update_outpass_status(id, 'Rejected', outpass_win))
            approve_btn.grid(row=row_idx, column=7, padx=5)
            reject_btn.grid(row=row_idx, column=8, padx=5)

        cursor.close()
        conn.close()

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error fetching outpass records:\n{err}")

def update_outpass_status(outpass_id, status, window):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # Update the outpass status (approve/reject)
        update_query = """
            UPDATE outpass_requests
            SET status = %s, request_date = IFNULL(request_date, NOW())  -- Set request_date if it's NULL
            WHERE request_id = %s
        """
        cursor.execute(update_query, (status, outpass_id))
        conn.commit()

        messagebox.showinfo("Outpass Status", f"Outpass has been {status.lower()}.")

        # Close the window after updating the status
        window.destroy()

        cursor.close()
        conn.close()

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error updating outpass status:\n{err}")

def view_hostellers():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # Query to fetch all hostellers
        query = """
            SELECT user_id, first_name, last_name, email, phone_number, year_of_study, department, hostel_name, room_number
            FROM users
            WHERE role = 'hosteller';
        """
        cursor.execute(query)
        hostellers = cursor.fetchall()

        if not hostellers:
            messagebox.showinfo("View Hostellers", "No hostellers found.")
            return

        # Create a new window to display hostellers
        hosteller_win = tk.Toplevel()
        hosteller_win.title("List of Hostellers")
        hosteller_win.geometry("800x400")
        hosteller_win.config(bg="white")

        tk.Label(hosteller_win, text="List of Hostellers", font=("Arial", 14, "bold"), bg="white").pack(pady=10)

        frame = tk.Frame(hosteller_win, bg="white")
        frame.pack(fill="both", expand=True)

        # Create headings for the table
        headings = ["User ID", "First Name", "Last Name", "Email", "Phone", "Year of Study", "Department", "Hostel Name", "Room Number"]
        for idx, heading in enumerate(headings):
            tk.Label(frame, text=heading, font=("Arial", 10, "bold"), bg="lightgray", width=15, borderwidth=1, relief="solid").grid(row=0, column=idx)

        # Display all hostellers
        for row_idx, row in enumerate(hostellers, start=1):
            for col_idx, value in enumerate(row):
                tk.Label(frame, text=value, font=("Arial", 10), bg="white", width=15, borderwidth=1, relief="solid").grid(row=row_idx, column=col_idx)

        cursor.close()
        conn.close()

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error fetching hostellers:\n{err}")

def view_attendance_summary():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # Get the current month and year
        current_month = datetime.now().month
        current_year = datetime.now().year

        # Query to get total attendance records for the current month
        query = """
            SELECT u.first_name, u.last_name, a.status
            FROM attendance a
            JOIN users u ON a.username = u.username
            WHERE MONTH(a.date) = %s AND YEAR(a.date) = %s;
        """
        cursor.execute(query, (current_month, current_year))
        attendance_records = cursor.fetchall()

        if not attendance_records:
            messagebox.showinfo("Attendance Summary", "No attendance records found for the current month.")
            return

        # Calculate the summary details
        total_hostellers = len(set([record[0] + " " + record[1] for record in attendance_records]))  # unique hostellers
        present_count = sum(1 for record in attendance_records if record[2] == 'P')
        absent_count = sum(1 for record in attendance_records if record[2] == 'A')
        leave_count = sum(1 for record in attendance_records if record[2] == 'L')

        attendance_percentage = (present_count / len(attendance_records)) * 100 if attendance_records else 0

        # Create a new window to display the attendance summary
        summary_win = tk.Toplevel()
        summary_win.title("Attendance Summary")
        summary_win.geometry("400x300")
        summary_win.config(bg="white")

        tk.Label(summary_win, text="Attendance Summary", font=("Arial", 14, "bold"), bg="white").pack(pady=10)

        # Display the summary information
        summary_text = f"""
        Total Hostellers: {total_hostellers}
        Present: {present_count}
        Absent: {absent_count}
        On Leave: {leave_count}
        Attendance Percentage: {attendance_percentage:.2f}%
        """
        tk.Label(summary_win, text=summary_text, font=("Arial", 12), bg="white").pack(pady=20)

        cursor.close()
        conn.close()

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error fetching attendance summary:\n{err}")

def show_birthday_alerts():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # Get today's month and day (ignore the year)
        today = datetime.now()
        today_month_day = today.strftime('%m-%d')

        # Query to get users with today's birthday (ignoring the year)
        query = """
            SELECT first_name, last_name, email
            FROM users
            WHERE DATE_FORMAT(DOB, '%m-%d') = %s;
        """
        cursor.execute(query, (today_month_day,))
        birthday_users = cursor.fetchall()

        if not birthday_users:
            messagebox.showinfo("Birthday Alerts", "No birthdays today.")
            return

        # Create a new window to display today's birthdays
        birthday_win = tk.Toplevel()
        birthday_win.title("Birthday Alerts")
        birthday_win.geometry("400x300")
        birthday_win.config(bg="white")

        tk.Label(birthday_win, text="Today's Birthdays", font=("Arial", 14, "bold"), bg="white").pack(pady=10)

        # Display the list of birthday users
        birthday_text = "\n".join([f"{user[0]} {user[1]} (Email: {user[2]})" for user in birthday_users])
        tk.Label(birthday_win, text=birthday_text, font=("Arial", 12), bg="white").pack(pady=20)

        cursor.close()
        conn.close()

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error fetching birthday list:\n{err}")



def filter_hostellers():
    def apply_filter():
        # Get the filter values from the selected dropdown options
        hostel_name = hostel_name_var.get()
        department = department_var.get()
        year_of_study = year_of_study_var.get()

        # Build the query based on the provided filter values
        query = "SELECT first_name, last_name, hostel_name, department, year_of_study FROM users WHERE role = 'hosteller'"

        # Collect filter conditions
        conditions = []
        params = []

        if hostel_name != "All Hostels":
            conditions.append("hostel_name = %s")
            params.append(hostel_name)
        if department != "All Departments":
            conditions.append("department = %s")
            params.append(department)
        if year_of_study != "All Years":
            conditions.append("year_of_study = %s")
            params.append(year_of_study)

        # Add conditions to the query if any filters are applied
        if conditions:
            query += " AND " + " AND ".join(conditions)

        # Execute the query
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(query, tuple(params))
            filtered_hostellers = cursor.fetchall()

            # Display the filtered results
            if filtered_hostellers:
                result_window = tk.Toplevel()
                result_window.title("Filtered Hostellers")
                result_window.geometry("600x400")
                result_window.config(bg="white")

                # Create a Label to show the count of filtered hostellers
                count_label = tk.Label(result_window, text=f"Total Hostellers Found: {len(filtered_hostellers)}", font=("Arial", 14, "bold"), bg="white")
                count_label.pack(pady=10)

                # Create a Treeview widget to display the filtered hostellers in columns
                tree = ttk.Treeview(result_window, columns=("First Name", "Last Name", "Hostel Name", "Department", "Year of Study"), show="headings")
                
                # Define the columns
                tree.heading("First Name", text="First Name")
                tree.heading("Last Name", text="Last Name")
                tree.heading("Hostel Name", text="Hostel Name")
                tree.heading("Department", text="Department")
                tree.heading("Year of Study", text="Year of Study")

                # Define the column widths
                tree.column("First Name", width=150)
                tree.column("Last Name", width=150)
                tree.column("Hostel Name", width=120)
                tree.column("Department", width=120)
                tree.column("Year of Study", width=100)

                # Insert the filtered data into the Treeview
                for hosteller in filtered_hostellers:
                    tree.insert("", tk.END, values=hosteller)

                # Add a scrollbar to the Treeview
                scrollbar = ttk.Scrollbar(result_window, orient="vertical", command=tree.yview)
                tree.configure(yscrollcommand=scrollbar.set)
                scrollbar.pack(side="right", fill="y")

                tree.pack(pady=20)

            else:
                messagebox.showinfo("No Results", "No hostellers found matching the filter criteria.")
            cursor.close()
            conn.close()
        except mysql.connector.Error as err:
            messagebox.showerror("Database Error", f"Error fetching hosteller data:\n{err}")
    # Create a new window for filter options
    filter_win = tk.Toplevel()
    filter_win.title("Filter Hostellers")
    filter_win.geometry("400x300")
    filter_win.config(bg="white")

    # Hostel Name Dropdown
    tk.Label(filter_win, text="Filter by Hostel Name", bg="white").pack(pady=5)
    hostel_name_var = tk.StringVar()
    hostel_name_dropdown = ttk.Combobox(filter_win, textvariable=hostel_name_var, font=("Arial", 12))
    hostel_name_dropdown['values'] = ["All Hostels", "Hostel A", "Hostel B", "Hostel C"]  # Example hostel names
    hostel_name_dropdown.current(0)  # Set default value to "All Hostels"
    hostel_name_dropdown.pack(pady=5)
    tk.Label(filter_win, text="Filter by Department", bg="white").pack(pady=5)
    department_var = tk.StringVar()
    department_dropdown = ttk.Combobox(filter_win, textvariable=department_var, font=("Arial", 12))
    department_dropdown['values'] = ["All Departments", "Computer Science", "Mechanical", "Electrical"]  # Example departments
    department_dropdown.current(0)  # Set default value to "All Departments"
    department_dropdown.pack(pady=5)
    tk.Label(filter_win, text="Filter by Year of Study", bg="white").pack(pady=5)
    year_of_study_var = tk.StringVar()
    year_of_study_dropdown = ttk.Combobox(filter_win, textvariable=year_of_study_var, font=("Arial", 12))
    year_of_study_dropdown['values'] = ["All Years", "1", "2", "3", "4"]  # Example year of study options
    year_of_study_dropdown.current(0)  # Set default value to "All Years"
    year_of_study_dropdown.pack(pady=5)
    tk.Button(filter_win, text="Apply Filter", font=("Arial", 12), bg="skyblue", command=apply_filter).pack(pady=20)

# --- Only run when directly executed ---
if __name__ == "__main__":
    open_warden_dashboard()‚ÄÉ